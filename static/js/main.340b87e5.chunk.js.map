{"version":3,"sources":["Home.js","End.js","Option.js","LoadedGame.js","LoadingIcon.js","Main.js","App.js","reportWebVitals.js","index.js"],"names":["Home","id","className","to","End","props","finalText","totalFinalScore","localStorage","getItem","AnswerOption","letter","onMouseDown","picked","answer","LoadedGame","currentQuestion","totalQuestion","score","question","Option","function","A","B","C","D","LoadingIcon","title","version","xmlns","xmlnsXlink","x","y","width","height","viewBox","xmlSpace","fill","d","attributeType","attributeName","type","from","dur","repeatCount","Main","history","useHistory","useState","setQuestion","formattedCorrectAnswers","useRef","formattedIncorrectAnswers","formattedQuestions","copyFormattedQuestionsLength","formattedEveryAnswer","a","setA","b","setB","c","setC","setD","isPending","setIsPending","error","setError","count","setCount","totalCount","setTotalCount","setScore","acceptingAnswers","setAcceptingAnswers","windowPath","window","location","pathname","url","chooseSubject","path","console","log","pathName","useEffect","fetch","then","res","ok","Error","json","data","decodeUnicode","str","decodeURIComponent","atob","split","map","charCodeAt","toString","slice","join","loadedQuestion","incorrectAnswers","correctAnswers","everyAnswer","results","result","push","item","current","length","i","concat","startGame","catch","message","getNewQuestion","setItem","func","set","number","answerIndex","Math","floor","random","splice","shift","e","clickedAnswer","target","textContent","getElem","classList","add","setTimeout","remove","showAnswer","App","basename","process","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.340b87e5.chunk.js","sourcesContent":["import React from \"react\";\n//import { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <div id=\"home\">\n      <h1>Trivia Time</h1>\n      <div className=\"buttons\">\n        <Link id=\"gkBtn\" className=\"btn\" to=\"/game/general\">\n          General\n        </Link>\n        <Link id=\"historyBtn\" className=\"btn\" to=\"/game/history\">\n          History\n        </Link>\n        <Link id=\"geographyBtn\" className=\"btn\" to=\"/game/geography\">\n          Geography\n        </Link>\n        <Link id=\"sportsBtn\" className=\"btn\" to=\"/game/sports\">\n          Sports\n        </Link>\n        <Link id=\"mythologyBtn\" className=\"btn\" to=\"/game/mythology\">\n          Mythology\n        </Link>\n        <Link id=\"musicBtn\" className=\"btn\" to=\"/game/music\">\n          Music\n        </Link>\n        <Link id=\"scienceBtn\" className=\"btn\" to=\"/game/science\">\n          Science!\n        </Link>\n        <Link id=\"politicsBtn\" className=\"btn\" to=\"/game/politics\">\n          Politics\n        </Link>\n        <Link id=\"animalsBtn\" className=\"btn\" to=\"/game/animals\">\n          Animals\n        </Link>\n        <Link id=\"randomBtn\" className=\"btn\" to=\"/game/random\">\n          Random\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst End = (props) => {\n  const totalFinalScore = localStorage.getItem(\"finalScore\");\n  let finalText;\n  if (totalFinalScore === \"50\") {\n    finalText = \"NERD!\";\n  } else if (totalFinalScore === \"40\") {\n    finalText = \"GOOD STUFF\";\n  } else if (totalFinalScore === \"30\") {\n    finalText = \"NOT BAD..\";\n  } else if (totalFinalScore < \"30\" && totalFinalScore > \"0\") {\n    finalText = \"OOF..\";\n  } else {\n    finalText = \"YOU SUCK!\";\n  }\n\n  return (\n    <div className=\"container\">\n      <div id=\"final\">\n        <h1>{finalText}</h1>\n        <h1 className=\"the-scores\" id=\"totalScore\">\n          Final Score: {totalFinalScore}\n        </h1>\n        <Link className=\"btn\" id=\"restart\" to=\"/\">\n          Restart\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default End;\n","import React from \"react\";\n\nconst AnswerOption = (props) => {\n  return (\n    <div className=\"choice-box\">\n      <p className=\"choice-option\">{props.letter}</p>\n      <p className=\"choice-text\" onMouseDown={props.picked}>\n        {props.answer}\n      </p>\n    </div>\n  );\n};\n\nexport default AnswerOption;\n","import React from \"react\";\nimport Option from \"./Option\";\nimport { Link } from \"react-router-dom\";\n\nconst LoadedGame = (props) => {\n  return (\n    <div className=\"game\">\n      <div className=\"header\">\n        <div id=\"item\">\n          <p className=\"item-prefix\">Question</p>\n          <h1 className=\"main-text\" id=\"questionCounter\">\n            {props.currentQuestion} / {props.totalQuestion}\n          </h1>\n        </div>\n        <div id=\"item\">\n          <p className=\"item-prefix\">Score</p>\n          <h1 className=\"main-text\" id=\"score\">\n            {props.score}\n          </h1>\n        </div>\n      </div>\n      <h2 id=\"question\">{props.question}</h2>\n      <div id=\"choicesContainer\">\n        <Option picked={props.function} letter={\"A\"} answer={props.A} />\n        <Option picked={props.function} letter={\"B\"} answer={props.B} />\n        <Option picked={props.function} letter={\"C\"} answer={props.C} />\n        <Option picked={props.function} letter={\"D\"} answer={props.D} />\n      </div>\n      <div id=\"footer\">\n        <Link id=\"homeBtn\" className=\"btn\" to=\"/\" /* name=\"Home\" */>\n          Home\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadedGame;\n","import React from \"react\";\n\nconst LoadingIcon = () => {\n  return (\n    <div>\n      <div className=\"loader loader--style3\" title=\"2\">\n        <svg\n          version=\"1.1\"\n          id=\"loader-1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          x=\"0px\"\n          y=\"0px\"\n          width=\"48px\"\n          height=\"48px\"\n          viewBox=\"0 0 50 50\"\n          xmlSpace=\"preserve\"\n        >\n          <path\n            fill=\"#F08080\"\n            d=\"M43.935,25.145c0-10.318-8.364-18.683-18.683-18.683c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615c8.072,0,14.615,6.543,14.615,14.615H43.935z\"\n          >\n            <animateTransform\n              attributeType=\"xml\"\n              attributeName=\"transform\"\n              type=\"rotate\"\n              from=\"0 25 25\"\n              to=\"360 25 25\"\n              dur=\"0.6s\"\n              repeatCount=\"indefinite\"\n            />\n\n            {/* source https://codepen.io/aurer/pen/jEGbA */}\n          </path>\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default LoadingIcon;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport LoadedGame from \"./LoadedGame\";\nimport LoadingIcon from \"./LoadingIcon\";\n\nconst Main = () => {\n  let history = useHistory();\n  const [question, setQuestion] = useState(null);\n\n  const formattedCorrectAnswers = useRef();\n  const formattedIncorrectAnswers = useRef();\n  const formattedQuestions = useRef();\n  const copyFormattedQuestionsLength = useRef();\n  const formattedEveryAnswer = useRef();\n\n  const [a, setA] = useState(null);\n  const [b, setB] = useState(null);\n  const [c, setC] = useState(null);\n  const [d, setD] = useState(null);\n\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n\n  const [count, setCount] = useState(0);\n  const [totalCount, setTotalCount] = useState(null);\n  let [score, setScore] = useState(0);\n\n  let [acceptingAnswers, setAcceptingAnswers] = useState(false);\n  const CORRECT_POINTS = 10;\n  const questionCounter = 1;\n\n  const windowPath = window.location.pathname;\n\n  const url = (id) =>\n    `https://opentdb.com/api.php?amount=5&category=${id}&type=multiple&encode=base64`;\n\n  const chooseSubject = (path) => {\n    console.log(window.location);\n    console.log(path);\n    const pathName = \"/trivia-time/game\";\n\n    if (path === `${pathName}/general`) {\n      return url(9);\n    } else if (path === `${pathName}/geography`) {\n      return url(22);\n    } else if (path === `${pathName}/history`) {\n      return url(23);\n    } else if (path === `${pathName}/sports`) {\n      return url(21);\n    } else if (path === `${pathName}/mythology`) {\n      return url(20);\n    } else if (path === `${pathName}/music`) {\n      return url(12);\n    } else if (path === `${pathName}/science`) {\n      return url(17);\n    } else if (path === `${pathName}/politics`) {\n      return url(24);\n    } else if (path === `${pathName}/animals`) {\n      return url(27);\n    } else if (path === `${pathName}/random`) {\n      return url(0);\n    }\n  };\n\n  useEffect(() => {\n    fetch(chooseSubject(windowPath))\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Something went wrong. Try a different category.\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        //function to decode base64 16bytes\n        function decodeUnicode(str) {\n          // Going backwards: from bytestream, to percent-encoding, to original string.\n          return decodeURIComponent(\n            atob(str)\n              .split(\"\")\n              .map(function (c) {\n                return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n              })\n              .join(\"\")\n          );\n        }\n\n        //get data, separate by questions, correct and incorrect answers thru arrays\n\n        //one array per category\n        let loadedQuestion = [];\n        let incorrectAnswers = [];\n        let correctAnswers = [];\n        let everyAnswer = [];\n\n        //map thru the data and push each category to the right array while decoding everything\n        data.results.map((result) => {\n          loadedQuestion.push(decodeUnicode(result.question));\n          incorrectAnswers.push(\n            result[\"incorrect_answers\"].map((item) => decodeUnicode(item))\n          );\n          correctAnswers.push(decodeUnicode(result[\"correct_answer\"]));\n          return [];\n        });\n\n        //hook useRef to use variables outside of the useEffect\n        formattedCorrectAnswers.current = [...correctAnswers];\n        formattedIncorrectAnswers.current = [...incorrectAnswers];\n        formattedQuestions.current = [...loadedQuestion];\n        copyFormattedQuestionsLength.current = loadedQuestion.length;\n\n        //join all answers together for each question\n        for (let i = 0; i <= formattedQuestions.current.length - 1; i++) {\n          everyAnswer.push(\n            formattedIncorrectAnswers.current[i].concat(\n              formattedCorrectAnswers.current[i]\n            )\n          );\n          formattedEveryAnswer.current = [...everyAnswer];\n        }\n\n        //done fetching\n        setIsPending(false);\n        //render any error\n        setError(null);\n        //function that will start the game is called up\n        startGame();\n      })\n      .catch((error) => {\n        console.error(error);\n        setIsPending(false);\n        setError(error.message);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [chooseSubject(windowPath)]);\n\n  //to start the game set score and question counter to 0, and call the function to get questions\n  const startGame = () => {\n    setCount(0);\n    setScore(0);\n    getNewQuestion();\n  };\n\n  //check if there are questions available, if so get it, update count, set total count\n  //set new question, assign each possible answer randomly, delete the question/answers used\n  //and allow user to answer. if no more questions are available, change to end page\n\n  const getNewQuestion = () => {\n    if (\n      formattedQuestions.current.length === 0 ||\n      questionCounter > formattedQuestions.current.length\n    ) {\n      localStorage.setItem(\"finalScore\", score);\n      return history.push(\"/end\");\n    }\n\n    setCount(count + questionCounter);\n    setTotalCount(copyFormattedQuestionsLength.current);\n    setQuestion(formattedQuestions.current[0]);\n\n    //function that randomly assigns answers to each option\n\n    const func = (set, number) => {\n      let answerIndex = Math.floor(Math.random() * number);\n      set(formattedEveryAnswer.current[0][answerIndex]);\n      formattedEveryAnswer.current[0].splice([answerIndex], 1);\n      return set;\n    };\n\n    func(setA, 4);\n    func(setB, 3);\n    func(setC, 2);\n    func(setD, 1);\n\n    formattedEveryAnswer.current.shift();\n    formattedQuestions.current.shift();\n\n    setAcceptingAnswers(true);\n  };\n\n  //check if a question has been picked already. when answer is picked, save it to var and\n  //check if matches the correct answer. give the right or wrong answer then call\n  //func to get new question again.\n  const showAnswer = (e) => {\n    const clickedAnswer = e.target.textContent;\n    const getElem = e.target.classList;\n    if (!acceptingAnswers) return;\n\n    setAcceptingAnswers(false);\n\n    if (formattedCorrectAnswers.current[0] === clickedAnswer) {\n      getElem.add(\"correct\");\n      setScore((score += CORRECT_POINTS));\n    } else {\n      getElem.add(\"incorrect\");\n    }\n    formattedCorrectAnswers.current.shift();\n    setTimeout(() => {\n      getElem.remove(\"correct\");\n      getElem.remove(\"incorrect\");\n      getNewQuestion();\n    }, 1100);\n  };\n\n  return (\n    <div className=\"game\">\n      {error && <h2>{error}</h2>}\n      {isPending && <LoadingIcon />}\n      {question && (\n        <LoadedGame\n          currentQuestion={count}\n          totalQuestion={totalCount}\n          question={question}\n          A={a}\n          B={b}\n          C={c}\n          D={d}\n          function={(e) => showAnswer(e)}\n          score={score}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport End from \"./End\";\nimport Main from \"./Main\";\n\nconst App = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/game/:id\">\n            <Main />\n          </Route>\n          <Route>\n            <End />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}